comment "//" ;

TSimpleTypeName. TypeName ::= Ident ;
TPolymorphicTypeName. TypeName ::= Ident "<" [TypeName] ">" ;
separator TypeName "," ;

EAdd. Expr6  ::= Expr6  "+" Expr7 ;
ESub. Expr6  ::= Expr6  "-" Expr7 ;
EMul. Expr7 ::= Expr7 "*" Expr8 ;
EDiv. Expr7 ::= Expr7 "/" Expr8 ;

EEq. Expr5 ::= Expr5 "==" Expr6 ;
ENotEq. Expr5 ::= Expr5 "!=" Expr6 ;
ELt. Expr5 ::= Expr5 "<" Expr6 ;
EGt. Expr5 ::= Expr5 ">" Expr6 ;
ELtEq. Expr5 ::= Expr5 "<=" Expr6 ;
EGtEq. Expr5 ::= Expr5 ">=" Expr6 ;

EInt. Expr10 ::= Integer ;
ENegInt. Expr10  ::= "-" Integer ;

EOr. Expr2  ::= Expr2  "or" Expr5 ;
EAnd. Expr2  ::= Expr2 "and" Expr5 ;
ENot. Expr7 ::= "not" Expr8 ;
ETrue. Expr10 ::= "true" ;
EFalse. Expr10 ::= "false" ;

AFunctionArgument. FunctionParameter ::= Ident ":" TypeName ;
separator FunctionParameter "," ;

ELambda. Expr9 ::= "(" FunctionParameter "->" Expr ")";

EVar. Expr10 ::= Ident ;
EFunCall. Expr9 ::= Expr9 "(" [Expr] ")" ;
separator Expr "," ;

ECons. Expr4 ::= Expr5 "::" Expr4 ;
EList. Expr5 ::= "[" [Expr] "]" ;
ENil. Expr5 ::= "nil" ;

EIfte. Expr3 ::= "if" Expr3 "then" Expr3 "else" Expr3 ;

ESemicolon. Expr1 ::= Stmt ";" Expr1 ; -- to zmienic na najnizszy priorytet. Wszystko podbi?.
SDeclVar. Stmt ::= "val" Ident "=" Expr ;
SDeclFun. Stmt ::= "fun" Ident "(" [FunctionParameter] ")" ":" TypeName "{" Expr "}" ;
separator Ident "," ;

MMatchClause. MatchClause ::= "as" Expr1 "~>" Expr2 ; 
EMatch. Expr ::= "match" Expr1 [MatchClause] ;
separator MatchClause "" ;

coercions Expr 10 ;
