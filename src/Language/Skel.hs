module Language.Skel where

-- Haskell module generated by the BNF converter

import Language.Abs
import Language.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transExpr :: Expr -> Result
transExpr x = case x of
  EAdd expr1 expr2 -> failure x
  ESub expr1 expr2 -> failure x
  EMul expr1 expr2 -> failure x
  EDiv expr1 expr2 -> failure x
  EEq expr1 expr2 -> failure x
  ENotEq expr1 expr2 -> failure x
  ELt expr1 expr2 -> failure x
  EGt expr1 expr2 -> failure x
  ELtEq expr1 expr2 -> failure x
  EGtEq expr1 expr2 -> failure x
  EInt integer -> failure x
  EOr expr1 expr2 -> failure x
  EAnd expr1 expr2 -> failure x
  ENot expr -> failure x
  ETrue -> failure x
  EFalse -> failure x
  ELambda ident expr -> failure x
  EVar ident -> failure x
  EFunCall expr exprs -> failure x
  EList exprs -> failure x
  EIfte expr1 expr2 expr3 -> failure x
  ESemicolon stmt expr -> failure x
transStmt :: Stmt -> Result
transStmt x = case x of
  SDeclVar ident expr -> failure x
  SDeclFun ident idents expr -> failure x

