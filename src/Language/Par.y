-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Language.Par where
import Language.Abs
import Language.Lex
import Language.ErrM

}

%name pTypeName TypeName
%name pListTypeName ListTypeName
%name pExpr6 Expr6
%name pExpr7 Expr7
%name pExpr5 Expr5
%name pExpr10 Expr10
%name pExpr2 Expr2
%name pExpr9 Expr9
%name pListExpr ListExpr
%name pExpr4 Expr4
%name pExpr3 Expr3
%name pExpr1 Expr1
%name pStmt Stmt
%name pListIdent ListIdent
%name pMatchClause MatchClause
%name pExpr Expr
%name pListMatchClause ListMatchClause
%name pExpr8 Expr8
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!=' { PT _ (TS _ 1) }
  '(' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '*' { PT _ (TS _ 4) }
  '+' { PT _ (TS _ 5) }
  ',' { PT _ (TS _ 6) }
  '-' { PT _ (TS _ 7) }
  '->' { PT _ (TS _ 8) }
  '/' { PT _ (TS _ 9) }
  ':' { PT _ (TS _ 10) }
  '::' { PT _ (TS _ 11) }
  ';' { PT _ (TS _ 12) }
  '<' { PT _ (TS _ 13) }
  '<=' { PT _ (TS _ 14) }
  '=' { PT _ (TS _ 15) }
  '==' { PT _ (TS _ 16) }
  '>' { PT _ (TS _ 17) }
  '>=' { PT _ (TS _ 18) }
  '[' { PT _ (TS _ 19) }
  ']' { PT _ (TS _ 20) }
  'and' { PT _ (TS _ 21) }
  'as' { PT _ (TS _ 22) }
  'else' { PT _ (TS _ 23) }
  'false' { PT _ (TS _ 24) }
  'fun' { PT _ (TS _ 25) }
  'if' { PT _ (TS _ 26) }
  'match' { PT _ (TS _ 27) }
  'nil' { PT _ (TS _ 28) }
  'not' { PT _ (TS _ 29) }
  'or' { PT _ (TS _ 30) }
  'then' { PT _ (TS _ 31) }
  'true' { PT _ (TS _ 32) }
  'val' { PT _ (TS _ 33) }
  '{' { PT _ (TS _ 34) }
  '}' { PT _ (TS _ 35) }
  '~>' { PT _ (TS _ 36) }
  L_ident  { PT _ (TV $$) }
  L_integ  { PT _ (TI $$) }

%%

Ident   :: { Ident }
Ident    : L_ident  { Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read ( $1)) :: Integer }

TypeName :: { TypeName }
TypeName : Ident { Language.Abs.TSimpleTypeName $1 }
         | Ident '<' ListTypeName '>' { Language.Abs.TPolymorphicTypeName $1 $3 }
ListTypeName :: { [TypeName] }
ListTypeName : {- empty -} { [] }
             | TypeName { (:[]) $1 }
             | TypeName ',' ListTypeName { (:) $1 $3 }
Expr6 :: { Expr }
Expr6 : Expr6 '+' Expr7 { Language.Abs.EAdd $1 $3 }
      | Expr6 '-' Expr7 { Language.Abs.ESub $1 $3 }
      | Expr7 { $1 }
Expr7 :: { Expr }
Expr7 : Expr7 '*' Expr8 { Language.Abs.EMul $1 $3 }
      | Expr7 '/' Expr8 { Language.Abs.EDiv $1 $3 }
      | 'not' Expr8 { Language.Abs.ENot $2 }
      | Expr8 { $1 }
Expr5 :: { Expr }
Expr5 : Expr5 '==' Expr6 { Language.Abs.EEq $1 $3 }
      | Expr5 '!=' Expr6 { Language.Abs.ENotEq $1 $3 }
      | Expr5 '<' Expr6 { Language.Abs.ELt $1 $3 }
      | Expr5 '>' Expr6 { Language.Abs.EGt $1 $3 }
      | Expr5 '<=' Expr6 { Language.Abs.ELtEq $1 $3 }
      | Expr5 '>=' Expr6 { Language.Abs.EGtEq $1 $3 }
      | 'nil' { Language.Abs.ENil }
      | Expr6 { $1 }
Expr10 :: { Expr }
Expr10 : Integer { Language.Abs.EInt $1 }
       | 'true' { Language.Abs.ETrue }
       | 'false' { Language.Abs.EFalse }
       | Ident { Language.Abs.EVar $1 }
       | '(' Expr ')' { $2 }
Expr2 :: { Expr }
Expr2 : Expr2 'or' Expr5 { Language.Abs.EOr $1 $3 }
      | Expr2 'and' Expr5 { Language.Abs.EAnd $1 $3 }
      | Expr3 { $1 }
Expr9 :: { Expr }
Expr9 : '(' Ident ':' TypeName '->' Expr10 ')' { Language.Abs.ELambda $2 $4 $6 }
      | Expr9 '(' ListExpr ')' { Language.Abs.EFunCall $1 $3 }
      | Expr10 { $1 }
ListExpr :: { [Expr] }
ListExpr : {- empty -} { [] }
         | Expr { (:[]) $1 }
         | Expr ',' ListExpr { (:) $1 $3 }
Expr4 :: { Expr }
Expr4 : '[' ListExpr ']' { Language.Abs.EList $2 }
      | Expr4 '::' Expr5 { Language.Abs.ECons $1 $3 }
      | Expr5 { $1 }
Expr3 :: { Expr }
Expr3 : 'if' Expr3 'then' Expr3 'else' Expr3 { Language.Abs.EIfte $2 $4 $6 }
      | Expr4 { $1 }
Expr1 :: { Expr }
Expr1 : Stmt ';' Expr2 { Language.Abs.ESemicolon $1 $3 }
      | Expr2 { $1 }
Stmt :: { Stmt }
Stmt : 'val' Ident '=' Expr { Language.Abs.SDeclVar $2 $4 }
     | 'fun' Ident '(' ListIdent ')' '{' Expr '}' { Language.Abs.SDeclFun $2 $4 $7 }
ListIdent :: { [Ident] }
ListIdent : {- empty -} { [] }
          | Ident { (:[]) $1 }
          | Ident ',' ListIdent { (:) $1 $3 }
MatchClause :: { MatchClause }
MatchClause : 'as' Expr1 '~>' Expr2 { Language.Abs.MMatchClause $2 $4 }
Expr :: { Expr }
Expr : 'match' Expr1 ListMatchClause { Language.Abs.EMatch $2 (reverse $3) }
     | Expr1 { $1 }
ListMatchClause :: { [MatchClause] }
ListMatchClause : {- empty -} { [] }
                | ListMatchClause MatchClause { flip (:) $1 $2 }
Expr8 :: { Expr }
Expr8 : Expr9 { $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

