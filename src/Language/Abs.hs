-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Language.Abs where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data Expr
    = EAdd Expr Expr
    | ESub Expr Expr
    | EMul Expr Expr
    | EDiv Expr Expr
    | EInt Integer
    | EOr Expr Expr
    | EAnd Expr Expr
    | ENot Expr
    | ETrue
    | EFalse
    | EVar Ident
    | EFunCall Ident Expr
    | ESemicolon Stmt Expr
  deriving (Eq, Ord, Show, Read)

data Stmt = SDeclVar Ident Expr | SDeclFun Ident Ident Expr
  deriving (Eq, Ord, Show, Read)

