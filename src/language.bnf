EAdd. Expr  ::= Expr  "+" Expr1 ;
ESub. Expr  ::= Expr  "-" Expr1 ;
EMul. Expr1 ::= Expr1 "*" Expr2 ;
EDiv. Expr1 ::= Expr1 "/" Expr2 ;

EEq. Expr ::= Expr "==" Expr1 ;
ENotEq. Expr ::= Expr "!=" Expr1 ;
ELt. Expr ::= Expr "<" Expr1 ;
EGt. Expr ::= Expr ">" Expr1 ;
ELtEq. Expr ::= Expr "<=" Expr1 ;
EGtEq. Expr ::= Expr ">=" Expr1 ;

EInt. Expr2 ::= Integer ;

EOr. Expr  ::= Expr  "or" Expr1 ;
EAnd. Expr  ::= Expr  "and" Expr1 ;
ENot. Expr1 ::= "not" Expr2 ;
ETrue. Expr2 ::= "true" ;
EFalse. Expr2 ::= "false" ;

ELambda. Expr ::= Ident "->" Expr1;

EVar. Expr2 ::= Ident ;
EFunCall. Expr2 ::= Expr "(" [Expr] ")" ;
separator Expr "," ;

EList. Expr ::= "[" [Expr] "]" ;
ECons. Expr ::= Expr ":" Expr ;
ENil. Expr ::= "nil" ;

EIfte. Expr ::= "if" Expr "then" Expr "else" Expr ;

ESemicolon. Expr ::= Stmt ";" Expr ;
SDeclVar. Stmt ::= "val" Ident "=" Expr ;
SDeclFun. Stmt ::= "fun" Ident "(" [Ident] ")" "{" Expr "}" ;
separator Ident "," ;

MMatchClause. MatchClause ::= Expr "~>" Expr ; 
EMatch. Expr ::= "match" Expr1 "as" [MatchClause] ;
separator MatchClause "" ;

coercions Expr 2 ;
